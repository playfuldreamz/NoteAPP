/**
 * Embedding Service
 * Provides a unified interface for generating embeddings using different providers
 */
const XenovaEmbeddingProvider = require('./providers/xenovaEmbeddingProvider');
const OpenAIEmbeddingProvider = require('./providers/openAIEmbeddingProvider');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

class EmbeddingService {
  constructor() {
    this.provider = null;
    this.initializeProvider();
  }

  /**
   * Initialize the embedding provider based on configuration
   */
  initializeProvider() {
    // Use Xenova as the default provider (no API key required)
    try {
      this.provider = new XenovaEmbeddingProvider();
      console.log('Using Xenova embedding provider (default)');
      return;
    } catch (error) {
      console.warn('Failed to initialize Xenova provider:', error.message);
    }

    // Fall back to OpenAI if Xenova fails
    const openaiApiKey = process.env.OPENAI_API_KEY;
    if (openaiApiKey) {
      this.provider = new OpenAIEmbeddingProvider(openaiApiKey);
      console.log('Using OpenAI embedding provider (fallback)');
      return;
    }

    // Fallback message if no provider can be initialized
    if (!this.provider) {
      console.error('No embedding provider could be initialized. Xenova failed and no OpenAI API key is available.');
    }
  }

  /**
   * Generate an embedding for the given text
   * @param {string} text - The text to generate an embedding for
   * @returns {Promise<number[]>} - A promise that resolves to an array of numbers representing the embedding
   */
  async generateEmbedding(text) {
    if (!this.provider) {
      throw new Error('No embedding provider available. Please check your API keys.');
    }

    return this.provider.generateEmbedding(text);
  }

  /**
   * Get the dimension of the embeddings generated by the current provider
   * @returns {number} - The dimension of the embeddings
   */
  getEmbeddingDimension() {
    if (!this.provider) {
      throw new Error('No embedding provider available. Please check your API keys.');
    }

    return this.provider.getDimension();
  }
}

// Create a singleton instance
const embeddingService = new EmbeddingService();

module.exports = embeddingService;
