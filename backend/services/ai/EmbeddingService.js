/**
 * Embedding Service
 * Provides a unified interface for generating embeddings using different providers
 * based on user preferences
 */
const EmbeddingProviderFactory = require('./embeddingFactory');
const EmbeddingConfigService = require('./EmbeddingConfigService');
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

class EmbeddingService {
  constructor() {
    this.provider = null;
    this.initializeProvider();
  }

  /**
   * Initialize the embedding provider based on configuration
   * This initializes with the default provider (Xenova)
   */
  initializeProvider() {
    try {
      // Use Xenova as the default provider (no API key required)
      this.provider = EmbeddingProviderFactory.createProvider('xenova');
      console.log('Using Xenova embedding provider (default)');
    } catch (error) {
      console.warn('Failed to initialize Xenova provider:', error.message);
      
      // Try to initialize OpenAI as fallback
      try {
        this.provider = EmbeddingProviderFactory.createProvider('openai');
        console.log('Using OpenAI embedding provider (fallback)');
      } catch (fallbackError) {
        console.error('No embedding provider could be initialized:', fallbackError.message);
      }
    }
    
    // Fallback message if no provider can be initialized
    if (!this.provider) {
      console.error('No embedding provider could be initialized. Check your configuration and API keys.');
    }
  }
  
  /**
   * Initialize the embedding provider for a specific user
   * @param {number} userId - The user ID
   * @returns {Promise<void>}
   */
  async initializeProviderForUser(userId) {
    try {
      // Get user's embedding configuration
      const config = await EmbeddingConfigService.getUserEmbeddingConfig(userId);
      
      console.log(`Initializing embedding provider for user ${userId}: ${config.provider}`);
      
      try {
        // Use the factory to create the provider instance
        this.provider = EmbeddingProviderFactory.createProvider(config.provider);
        console.log(`Successfully initialized ${config.provider} embedding provider for user ${userId} via factory`);
      } catch (factoryError) {
        console.error(`Error creating embedding provider via factory for type '${config.provider}':`, factoryError);
        
        // Fall back to Xenova if the requested provider fails
        if (config.provider !== 'xenova') {
          console.warn(`Falling back to Xenova provider for user ${userId}`);
          this.provider = EmbeddingProviderFactory.createProvider('xenova');
        } else {
          // Re-throw if even the default provider fails
          throw factoryError;
        }
      }
    } catch (error) {
      console.error(`Error initializing provider for user ${userId}:`, error);
      // Fall back to default provider
      this.initializeProvider();
    }
  }

  /**
   * Generate an embedding for the given text
   * @param {string} text - The text to generate an embedding for
   * @param {number} [userId] - Optional user ID to use their preferred provider
   * @returns {Promise<number[]>} - A promise that resolves to the embedding vector
   */
  async generateEmbedding(text, userId) {
    try {
      // If userId is provided, initialize the provider for that user
      if (userId) {
        await this.initializeProviderForUser(userId);
      }

      // Check if a provider is available
      if (!this.provider) {
        throw new Error('No embedding provider is available');
      }

      // Log which provider is being used
      const providerName = this.provider.constructor.name;
      console.log(`Generating embedding using ${providerName} for ${userId ? `user ${userId}` : 'default user'}`);
      
      // Generate the embedding using the current provider
      const embedding = await this.provider.generateEmbedding(text);
      
      // Log success
      console.log(`Successfully generated embedding with ${providerName}: ${embedding.length} dimensions`);
      
      return embedding;
    } catch (error) {
      console.error('Error generating embedding:', error);
      throw error;
    }
  }

  /**
   * Get the dimension of the embeddings generated by the current provider
   * @returns {number} - The dimension of the embeddings
   */
  getEmbeddingDimension() {
    if (!this.provider) {
      throw new Error('No embedding provider available. Please check your API keys.');
    }

    return this.provider.getDimension();
  }
}

// Create a singleton instance
const embeddingService = new EmbeddingService();

module.exports = embeddingService;
