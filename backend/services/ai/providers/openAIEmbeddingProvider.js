/**
 * OpenAI Embedding Provider
 * Uses OpenAI's text-embedding model to generate embeddings
 */
const OpenAI = require('openai');
const EmbeddingProviderBase = require('./embeddingBase');

class OpenAIEmbeddingProvider extends EmbeddingProviderBase {
  constructor(apiKey, model = 'text-embedding-3-small') {
    super();
    this.client = new OpenAI({ apiKey });
    this.model = model;
    
    // Dimensions for different OpenAI embedding models
    this.dimensions = {
      'text-embedding-3-small': 384,
      'text-embedding-3-large': 1536,
      'text-embedding-ada-002': 1536
    };
  }

  /**
   * Generate an embedding for the given text using OpenAI
   * @param {string} text - The text to generate an embedding for
   * @returns {Promise<number[]>} - A promise that resolves to an array of numbers representing the embedding
   */
  async generateEmbedding(text) {
    try {
      // Truncate text if it's too long (OpenAI has token limits)
      const truncatedText = text.length > 8000 ? text.substring(0, 8000) : text;
      
      const response = await this.client.embeddings.create({
        model: this.model,
        input: truncatedText,
      });

      return response.data[0].embedding;
    } catch (error) {
      console.error('Error generating embedding with OpenAI:', error);
      throw error;
    }
  }

  /**
   * Get the dimension of the embeddings generated by this provider
   * @returns {number} - The dimension of the embeddings
   */
  getDimension() {
    return this.dimensions[this.model] || 384; // Default to 384 if model not found
  }
}

module.exports = OpenAIEmbeddingProvider;
