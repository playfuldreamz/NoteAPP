/**
 * Xenova Embedding Provider
 * Provides embeddings using the Xenova/all-MiniLM-L6-v2 model
 * This provider runs locally without requiring an API key
 */

// We'll use dynamic import for the Xenova transformers package since it's an ES Module
const EmbeddingProviderBase = require('./embeddingBase');

class XenovaEmbeddingProvider extends EmbeddingProviderBase {
  constructor() {
    this.pipe = null;
    this.modelName = 'Xenova/all-MiniLM-L6-v2';
    this.initialized = false;
    this.initializing = false;
  }

  /**
   * Initialize the embedding model
   * @returns {Promise<void>}
   */
  async initialize() {
    if (this.initialized || this.initializing) return;
    
    try {
      this.initializing = true;
      console.log(`Initializing Xenova embedding model: ${this.modelName}`);
      
      // Dynamically import the transformers package
      const { pipeline } = await import('@xenova/transformers');
      this.pipe = await pipeline('feature-extraction', this.modelName);
      
      this.initialized = true;
      this.initializing = false;
      console.log('Xenova embedding model initialized successfully');
    } catch (error) {
      this.initializing = false;
      console.error('Failed to initialize Xenova embedding model:', error);
      throw error;
    }
  }

  /**
   * Generate embedding for text
   * @param {string} text - Text to generate embedding for
   * @returns {Promise<number[]>} - Embedding as array of numbers
   */
  async embed(text) {
    if (!this.initialized) {
      await this.initialize();
    }

    try {
      // Generate embedding
      const result = await this.pipe(text, {
        pooling: 'mean',
        normalize: true
      });
      
      // Convert to array
      return Array.from(result.data);
    } catch (error) {
      console.error('Error generating embedding with Xenova:', error);
      throw error;
    }
  }

  /**
   * Get the dimension of the embeddings generated by this provider
   * @returns {number} - The dimension of the embeddings
   */
  getDimension() {
    // Dimension for Xenova/all-MiniLM-L6-v2
    return 384;
  }
}

module.exports = XenovaEmbeddingProvider;
